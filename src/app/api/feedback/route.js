import { NextResponse } from "next/server";
import { connectToDatabase } from "@/lib/mongodb";
import { ObjectId } from "mongodb";

// Placeholder data structure (will be removed)
/* const initialFeedback = [
  {
    id: "1",
    title: "Add dark mode",
    description: "Implement a dark theme for the app.",
    status: "Todo",
    votes: 5,
  },
  {
    id: "2",
    title: "Improve report generation speed",
    description: "Optimize the PDF generation process.",
    status: "InProgress",
    votes: 12,
  },
  {
    id: "3",
    title: "Integrate with Google Analytics",
    description: "Allow users to connect their GA account.",
    status: "Done",
    votes: 8,
  },
]; */

// GET handler to fetch feedback items
export async function GET(request) {
  try {
    const { db } = await connectToDatabase();
    const feedbackItems = await db
      .collection("feedback")
      .find({})
      .sort({ votes: -1, createdAt: -1 }) // Sort by votes desc, then newest first
      .toArray();

    // Convert ObjectId to string for JSON serialization
    const serializedItems = feedbackItems.map((item) => ({
      ...item,
      _id: item._id.toString(),
    }));

    return NextResponse.json(serializedItems);
  } catch (error) {
    console.error("Error fetching feedback:", error);
    return NextResponse.json(
      { message: "Error fetching feedback", error: error.message },
      { status: 500 }
    );
  }
}

// POST handler to add a new feedback item
export async function POST(request) {
  try {
    const body = await request.json();
    const { title, description, status } = body;

    // Validate required fields
    if (
      !title ||
      typeof title !== "string" ||
      title.trim() === "" ||
      !description ||
      typeof description !== "string"
    ) {
      return NextResponse.json(
        {
          message:
            "Title (non-empty string) and description (string) are required",
        },
        { status: 400 }
      );
    }

    // Validate and determine the status
    const validStatuses = ["Todo", "InProgress", "Done"];
    let finalStatus = "Todo"; // Default status
    if (status && validStatuses.includes(status)) {
      finalStatus = status;
    } else if (status) {
      // Optional: Log or return a specific warning if status is provided but invalid
      console.warn(
        `Invalid status '${status}' received during feedback creation. Defaulting to 'Todo'.`
      );
    }

    const newItem = {
      // _id will be generated by MongoDB
      title: title.trim(),
      description,
      status: finalStatus, // Use validated or default status
      votes: 0, // Default votes
      createdAt: new Date(),
    };

    const { db } = await connectToDatabase();
    const result = await db.collection("feedback").insertOne(newItem);

    // Return the newly created item with its generated ID
    const insertedItem = {
      ...newItem,
      _id: result.insertedId.toString(),
    };

    return NextResponse.json(insertedItem, { status: 201 });
  } catch (error) {
    console.error("Error adding feedback:", error);
    return NextResponse.json(
      { message: "Error adding feedback", error: error.message },
      { status: 500 }
    );
  }
}

// TODO: Add PUT handler for updating status (moving cards in Kanban)
// TODO: Add PUT/PATCH handler for updating votes
